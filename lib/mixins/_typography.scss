
$use-typography: true!default;


$fonts: (
  base: (
    h1: (
      font-size: 3.375em,
      line-height: 1.05,
      margin-bottom: $base-spacing-unit,
      media-query: (
        "handheld": (
          font-size: 2em,
          line-height: 1.25
        ),
        "portable": (
          font-size: 2.5em,
          line-height: 1.125
        )
      )
    ),
    h2: (
      font-size: 2.25em,
      line-height: 1.25,
      margin-bottom: $base-spacing-unit,
      media-query: (
        "handheld": (
          font-size: 1.625em,
          line-height: 1.15
        ),
        "portable": (
          font-size: 2em,
          line-height: 1.25
        )
      )
    ),
    h3: (
      font-size: 1.75em,
      line-height: 1.25,
      margin-bottom: $base-spacing-unit,
      media-query: (
        "handheld": (
          font-size: 1.375em,
          line-height: 1.13
        ),
        "portable": (
          font-size: 1.5em,
          line-height: 1.25
        )
      )
    ),
    h4: (
      font-size: 1.375em,
      line-height: 1.2222222,
      margin-bottom: $half-spacing-unit,
      media-query: (
        "handheld": (
          font-size: 1.125em,
          line-height: 1.22
        ),
        "portable": (
          font-size: 1.125em,
          line-height: 1.1111
        )
      )
    ),
    h5: (
      font-size: 1em,
      line-height: 1.25,
      margin-bottom: $half-spacing-unit
    ),
    p: (
      font-size: $base-font-size,
      line-height: $base-line-height,
      margin-bottom: $base-spacing-unit,
      media-query: (
        "handheld": (
          font-size: 1em,
          line-height: 1.15
        ),
        "portable": (
          font-size: 1.15em,
          line-height: 1.15
        )
      )
    )
  )
)!default;

// type sets
$typography: (
  h1: "base",
  h2: "base",
  h3: "base",
  h4: "base",
  h5: "base",
  p: "base"
)!default;


@if $use-typography == true {
  //
  // @name typography
  // @description Dynamically generates a set of base type styles from a source map. Combining a source map with the name $fonts and a selector map named $typography, this mixin will create base styling for your stylesheets typography. It makes updating and setting base type as easy as updating a map or two.
  //
  // @mixin true
  //
  // @variable fonts - styles (including media-queries) for given font families
  // @variable typography - list of fonts to use and for what elements
  //
  @mixin typography {
    // Make sure to only run if typography and fonts variable exist
    // Also verify that they are maps and not strings or other things
    @if global-variable-exists(typography) and variable-exists(fonts) and
    type-of($typography) == "map" and type-of($fonts) == "map" {

      // loop through each element in defined typography set
      @each $_element, $_type in $typography {

        // grab the acutal styles of each element in the font object
        $_styles: map-fetch($fonts, $_type, $_element);

        // create element for styling
        #{$_element} {
          // loop through all styles
          @each $_property, $_value in $_styles {
            // ignore media-queries
            @if $_property != "media-query" {
              // print out all other properties
              #{$_property}: $_value;
            }
          }
        }


        // if the given font has a media query for this element
        @if map-has-key($_styles, "media-query") {

          // loop through media query styles
          @each $_query, $_query-styles in map-get($_styles, "media-query") {

            @include media-query($_query) {
              #{$_element} {
                @each $_property, $_value in $_query-styles {
                  #{$_property}: $_value;
                }
              }
            }
          }
        }
      }
    }
  }



}
